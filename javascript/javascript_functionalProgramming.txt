Callbacks are the functions that are slipped or passed into another function to decide the invocation of that function. 
You may have seen them passed to other methods, for example in filter, the callback function tells JavaScript the 
criteria for how to filter an array.

Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal 
value, are called first class functions. In JavaScript, all functions are first class functions.

The functions that take a function as an argument, or return a function as a return value are called higher order functions.

When functions are passed in to or returned from another function, then those functions which were passed in or returned can be called 
a lambda.

const prepareGreenTea = () => 'greenTea';
const prepareBlackTea = () => 'blackTea';
const getTea = (prepareTea, numOfCups) => {
  const teaCups = [];

  for(let cups = 1; cups <= numOfCups; cups += 1) {
    const teaCup = prepareTea();
    teaCups.push(teaCup);
  }
  return teaCups;
};


//Apply function on every element of the array.
const ratings = watchList.map(function(film) {
  return {
    title: film.Title,
    rating: film.imdbRating
  }
})


//The forEach() method executes a provided function once for each array element.
const array1 = ['a', 'b', 'c'];
array1.forEach(element => console.log(element));

//filter calls a function on each element of an array and returns a new array containing only the elements for which that function 
returns true.
const users = [
  { name: 'John', age: 34 },
  { name: 'Amy', age: 20 },
  { name: 'camperCat', age: 10 }
];
const usersUnder30 = users.filter(user => user.age < 30);


const arr = ["Cat", "Dog", "Tiger", "Zebra"];
const newArray = arr.slice(1, 3);
//["Dog", "Tiger"]


[1, 2, 3].concat([4, 5, 6]);
//The returned array would be [1, 2, 3, 4, 5, 6]




The callback function accepts four arguments. The first argument is known as the accumulator, which gets assigned the return value of 
the callback function from the previous iteration, the second is the current element being processed, the third is the index of that 
element and the fourth is the array upon which reduce is called.
In addition to the callback function, reduce has an additional parameter which takes an initial value for the accumulator. If this second 
parameter is not used, then the first iteration is skipped and the second iteration gets passed the first element of the array as the 
accumulator.

const users = [
  { name: 'John', age: 34 },
  { name: 'Amy', age: 20 },
  { name: 'camperCat', age: 10 }
];
const sumOfAges = users.reduce((sum, user) => sum + user.age, 0);
console.log(sumOfAges);

const users = [
  { name: 'John', age: 34 },
  { name: 'Amy', age: 20 },
  { name: 'camperCat', age: 10 }
];
const usersObj = users.reduce((obj, user) => {
  obj[user.name] = user.age;
  return obj;
}, {});
console.log(usersObj);


function ascendingOrder(arr) {
  return arr.sort(function(a, b) {
    return a - b;
  });
}
ascendingOrder([1, 5, 2, 3, 4]);
//This would return the value [1, 2, 3, 4, 5].


//The every method works with arrays to check if every element passes a particular test.
const numbers = [1, 5, 8, 0, 10, 11];
numbers.every(function(currentValue) {
  return currentValue < 10; 
});


//The some cethod workds with arrays to check if any element passes a particular test.
const numbers = [10, 50, 8, 220, 110, 11];
numbers.some(function(currentValue) {
  return currentValue < 10;
});

"abc".split(""); //["a", "b", "c"]