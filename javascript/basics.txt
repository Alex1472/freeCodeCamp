types
	underfined
	null
	boolean
	string
	symbol
	bigint
	number
	object
	
	
var a; //a = undefined
var a = 1; //a - number

var a;
var b = a + "test"; //b = "undefinedtest"

var a;
var b = a + 1; //b = NaN

var a = 1;
var a = 2; //Correct

let a = 1;
let a = 2; //Error!

const A = 1; //constant

let a = 1;
a++; //It works.

let a = 1;
a += 3; //It works.

let a = 5 / 2; //2.5
let b = 5 % 2; //1




		STRINGS
String values are immutable.

const sampleStr = "Alan said, \"Peter is learning JavaScript\".";
const sampleStr = 'Alan said, \"Peter is learning JavaScript\".';
const conversation = 'Finn exclaims to Jake, "Algebraic!"';

\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	word boundary
\f	form feed

s = "a";
s += "b"; // "ab"

console.log("Alan Peter".length);

const firstName = "Charles";
const firstLetter = firstName[0];

s.toUpperCase();
s.toLowerCase();



	ARRAYS
	
const sandwich = ["peanut butter", "jelly", "bread"];
const myArray = ["a", 1]; //It can house different types.
const teams = [["Bulls", 23], ["White Sox", 45]];

const arr = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14]
];
arr[3];
arr[3][0];
arr[3][0][1];

const arr1 = [1, 2, 3]; 
arr1.push(4); //add value
let num = arr1.pop(); remove last element


const ourArray = ["Stimpson", "J", ["cat"]];
const removedFromOurArray = ourArray.shift(); //remove first element

const ourArray = ["Stimpson", "J", "cat"];
ourArray.shift();
ourArray.unshift("Happy"); //Add element at the begining of the array.



		FUNCTIONS
		
function functionName() {
  console.log("Hello World");
}
function testFun(param1, param2) {
  console.log(param1, param2);
}
function plusThree(num) {
  return num + 3;
}



You can use variables from the global scope.
let a = 2;
function Print() {
    console.log(a);
}
Print();

Variables which are declared without the let or const keywords are automatically created in the global scope. 
function Init() {
    a = 1; //with var, let const will be error.
}
function Print() {
    console.log(a);
}
Init();
Print(); //1


		OPERATOR IF

function equalityTest(myVal) {
  if (myVal == 10) {
    return "Equal";
  }
  return "Not Equal";
}

if (num > 10) {
  return "Bigger than 10";
} else {
  return "10 or Less";
}

if (num > 15) {
  return "Bigger than 15";
} else if (num < 5) {
  return "Smaller than 5";
} else {
  return "Between 5 and 15";
}


let a = 1;
let b = "test";
let aType = typeof a; //string "number"
let bType = typeof b; //string "string"



With type convertion
1   ==  1  // true
1   ==  2  // false
1   == '1' // true
"3" ==  3  // true

Without type convertion.
3 ===  3  // true
3 === '3' // false

With type convertion
1 !=  2    // true
1 != "1"   // false
1 != '1'   // false
1 != true  // false
0 != false // false

Without type convertion
3 !==  3  // false
3 !== '3' // true
4 !==  3  // true

With type convertion
5   >  3  // true
7   > '3' // true
2   >  3  // false
'1' >  9  // false

With type converiton
6   >=  6  // true
7   >= '3' // true
2   >=  3  // false
'7' >=  9  // false



if (num > 5 && num < 10) {
  return "Yes";
}
return "No";

if (num > 10 || num < 5) {
  return "No";
}
return "Yes";


OPERATOR SWITCH;

switch(lowercaseLetter) {
  case "a":
    console.log("A");
    break;
  case "b":
    console.log("B");
    break;
}
case values are tested with strict equality (===).

switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  default:
    defaultStatement;
    break;
}

let result = "";
switch(val) {
  case 1:
  case 2:
  case 3:
    result = "1, 2, or 3";
    break;
  case 4:
    result = "4 alone";
}



function isEqual(a, b) {
  return a === b;
}


		OBJECTS

Objects are similar to arrays, except that instead of using indexes to access and modify their data, you access the data in objects through what are called properties.
const anotherObject = {
  make: "Ford",
  5: "five",
  "model": "focus"
};
However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.

Dot notation is what you use when you know the name of the property you're trying to access ahead of time.
Here is a sample of using dot notation (.) to read an object's property:
const myObj = {
  prop1: "val1",
  prop2: "val2"
};
const prop1val = myObj.prop1;
const prop2val = myObj.prop2;

The second way to access the properties of an object is bracket notation ([]). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.
However, you can still use bracket notation on object properties without spaces.
Here is a sample of using bracket notation to read an object's property:
const myObj = {
  "Space Name": "Kirk",
  "More Space": "Spock",
  "NoSpace": "USS Enterprise"
};
myObj["Space Name"];
myObj['More Space'];
myObj["NoSpace"];

Add new property
ourDog.bark = "bow-wow";
ourDog["bark"] = "bow-wow";

Delete property
delete ourDog.bark;

Does the object has the property?
const myObj = {
  top: "hat",
  bottom: "pants"
};
myObj.hasOwnProperty("top");
myObj.hasOwnProperty("middle");

Accessing nested objects.
const ourStorage = {
  "desk": {
    "drawer": "stapler"
  },
  "cabinet": {
    "top drawer": { 
      "folder1": "a file",
      "folder2": "secrets"
    },
    "bottom drawer": "soda"
  }
};

ourStorage.cabinet["top drawer"].folder2;
ourStorage.desk.drawer;



		LOOPS

const ourArray = [];
let i = 0;
while (i < 5) {
  ourArray.push(i);
  i++;
}

const ourArray = [];
for (let i = 0; i < 5; i++) {
  ourArray.push(i);
}

const ourArray = []; 
let i = 5;
do {
  ourArray.push(i);
  i++;
} while (i < 5);



Math.random();
Math.floor(x);
parseInt(s); //if s invalid returns NaN
parseInt(s, 2); //Second argument is radix. In this case binary system.






