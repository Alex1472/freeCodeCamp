__proto__ is getter, setter for [[Prototype]]

We always setting properties to object, not to its prototype.
this - is always object before the dot, not its prototype.

let animal = {
    isAlive: true,
    setIsSleeping(value) {
        this.isSleeping = value;
    },
};
let rabbit = {
    __proto__: animal,
    canJump: true,
    showAlive() {
        console.log(this.isAlive);
    },
};
rabbit.setIsSleeping(true);



FOR IN LOOP
It goes for own and inherited properties;

let animal = {
    isAlive: true,
};
let rabbit = {
    __proto__: animal,
    canJump: true,
};
for (let key in rabbit) 
	console.log(key);
//isAlive, canJump	

Object.key, Object.values, Object.entries return only own object properties

console.log(Object.keys(rabbit)); //canJump
console.log(Object.values(rabbit)); //true
console.log(Object.entries(rabbit)); //[[canJump, true]]





Resume:

В JavaScript все объекты имеют скрытое свойство [[Prototype]], которое является либо другим объектом, либо null.

Мы можем использовать obj.__proto__ для доступа к нему (исторически обусловленный геттер/сеттер, 
есть другие способы, которые скоро будут рассмотрены).

Объект, на который ссылается [[Prototype]], называется «прототипом».

Если мы хотим прочитать свойство obj или вызвать метод, которого не существует у obj, 
тогда JavaScript попытается найти его в прототипе.

Операции записи/удаления работают непосредственно с объектом, они не используют прототип (если это обычное свойство, а не сеттер).

Если мы вызываем obj.method(), а метод при этом взят из прототипа, то this всё равно ссылается на obj. 
Таким образом, методы всегда работают с текущим объектом, даже если они наследуются.

Цикл for..in перебирает как свои, так и унаследованные свойства. Остальные методы получения ключей/значений работают только с собственными свойствами объекта.




Свойство F.prototype (не путать с [[Prototype]]) устанавливает[[Prototype]] для новых объектов при вызове new F().
Значение F.prototype должно быть либо объектом, либо null. Другие значения не будут работать.
Свойство "prototype" является особым, только когда оно назначено функции-конструктору, которая вызывается оператором new.
В обычных объектах prototype не является чем-то особенным:

let user = {
  name: "John",
  prototype: "Bla-bla" // никакой магии нет - обычное свойство
};
По умолчанию все функции имеют F.prototype = { constructor: F }, поэтому мы можем получить конструктор объекта через свойство "constructor".




Все встроенные объекты следуют одному шаблону:
Методы хранятся в прототипах (Array.prototype, Object.prototype, Date.prototype и т.д.).
Сами объекты хранят только данные (элементы массивов, свойства объектов, даты).
Примитивы также хранят свои методы в прототипах объектов-обёрток: Number.prototype, String.prototype, Boolean.prototype. 
Только у значений undefined и null нет объектов-обёрток.
Встроенные прототипы могут быть изменены или дополнены новыми методами. Но не рекомендуется менять их. 
Единственная допустимая причина – это добавление нового метода из стандарта, который ещё не поддерживается движком JavaScript.




Современные способы установки и прямого доступа к прототипу это:

Object.create(proto[, descriptors]) – создаёт пустой объект со свойством [[Prototype]], указанным как proto (может быть null), и необязательными дескрипторами свойств.
Object.getPrototypeOf(obj) – возвращает свойство [[Prototype]] объекта obj (то же самое, что и геттер __proto__).
Object.setPrototypeOf(obj, proto) – устанавливает свойство [[Prototype]] объекта obj как proto (то же самое, что и сеттер __proto__).
Встроенный геттер/сеттер __proto__ не безопасен, если мы хотим использовать созданные пользователями ключи в объекте. Как минимум потому, что пользователь может 
ввести "__proto__" как ключ, от чего может возникнуть ошибка. Если повезёт – последствия будут лёгкими, но, вообще говоря, они непредсказуемы.

Так что мы можем использовать либо Object.create(null) для создания «простейшего» объекта, либо использовать коллекцию Map.

Кроме этого, Object.create даёт нам лёгкий способ создать поверхностную копию объекта со всеми дескрипторами:

let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));
Мы также ясно увидели, что __proto__ – это геттер/сеттер для свойства [[Prototype]], и находится он в Object.prototype, как и другие методы.

Мы можем создавать объекты без прототипов с помощью Object.create(null). Такие объекты можно использовать как «чистые словари», у них нет проблем с использованием строки "__proto__" в качестве ключа.

Ещё методы:

Object.keys(obj) / Object.values(obj) / Object.entries(obj) – возвращают массив всех перечисляемых собственных строковых ключей/значений/пар ключ-значение.
Object.getOwnPropertySymbols(obj) – возвращает массив всех собственных символьных ключей.
Object.getOwnPropertyNames(obj) – возвращает массив всех собственных строковых ключей.
Reflect.ownKeys(obj) – возвращает массив всех собственных ключей.
obj.hasOwnProperty(key): возвращает true, если у obj есть собственное (не унаследованное) свойство с именем key.
Все методы, которые возвращают свойства объектов (такие как Object.keys и другие), возвращают «собственные» свойства. Если мы хотим получить и унаследованные, 
можно воспользоваться циклом for..in.
