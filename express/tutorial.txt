import express from "express";
import path from "path";

import { fileURLToPath } from "url";
import { dirname } from "path";
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
//to retrive dirname

const app = express();
app.get("/", (req, res) => {
    //sending text
    res.send("<h1>Hello world!!</h1>");
	//or sending from folder
    res.sendFile(path.join(__dirname, "public", "index.html"));
});

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => console.log("server started"));



//set static folder
const app = express();
app.use(express.static(path.join(__dirname, "public")));
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log("server started"));


//creating rest API
const app = express();

const members = [
    {
        id: 1,
        name: "John Doe",
        email: "john@gmail.com",
        status: "active",
    },
    {
        id: 2,
        name: "Bob Williams",
        email: "bob@gmail.com",
        status: "inactive",
    },
    {
        id: 3,
        name: "Shannon Jackson",
        email: "shannon@gmail.com",
        status: "active",
    },
];

app.get("/api/members", (req, res) => {
    res.json(members);
});




Add middleware
It's just a function that has excess to res and req objects. 
It will be executed on each responce.

const app = express();

const logger = (req, res, next) => {
    console.log(`${req.protocol}://${req.host}${req.originalUrl}`);
    next();
};

app.use(logger);
app.get("/api/members", (req, res) => {
    res.json(Members);
});



Creating a selection request.
const app = express();

app.get("/api/members", (req, res) => {
    res.json(members);
});
app.get("/api/members/:id", (req, res) => {
    const found = members.some(
        (member) => member.id === parseInt(req.params.id)
    );
    if (found)
        res.json(
            members.filter((member) => member.id === parseInt(req.params.id))
        );
    else
        res.status(400).json({
            msg: `No member with the id of ${req.params.id}`,
        });
});




Creating a router for api
import { Router } from "express";

const router = new Router();

router.get("/", (req, res) => {
    res.json(members);
});
router.get("/:id", (req, res) => {
    const found = members.some(
        (member) => member.id === parseInt(req.params.id)
    );
    if (found)
        res.json(
            members.filter((member) => member.id === parseInt(req.params.id))
        );
    else
        res.status(400).json({
            msg: `No member with the id of ${req.params.id}`,
        });
});


index.js
app.use("/api/members", router);


Post request (add new member).
We define new member in body (with postman).
router.post("/", (req, res) => {
    const newMember = {
        id: v4(),
        name: req.body.name,
        email: req.body.email,
        status: "active",
    };

    if (!newMember.name || !newMember.email)
        return res.status(400).send({ msg: "Please enter name and email." });

    members.push(newMember);
    res.json(members);
});

index.js
app.use(express.json()); - to parse body in json and add in to req.body


Update member. We use put request(router.put and use put request type on postman).
router.put("/:id", (req, res) => {
    const member = members.find(
        (member) => member.id === parseInt(req.params.id)
    );
    const updateMember = req.body;
    if (member) {
        member.name = updateMember.name ? updateMember.name : member.name;
        member.email = updateMember.email ? updateMember.email : member.email;
        res.json(members);
    } else {
        res.status(400).json({ msg: `No member with id of ${req.params.id}` });
    }
});

Render templates
We render html files, and add into template some values.
You need to install express-handlebars package

index.js - add handlebars
app.engine("handlebars", engine());
app.set("view engine", "handlebars");
app.set("views", "./views");

Then you need create a folder view and in it a folder layouts.
In the layouts folder we keep a page wrapper.

main.middleware

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
    <title>Document</title>
</head>
<body>
    <div class="container">
        {{{body}}}
    </div>
</body>
</html>

In the view folder you keep pages which will be inserted into the wrapper.

index.handlebars

<h1 class="text-center mt-3">{{title}}</h1>
<h2>Members</h2>
<ul class="list-group">
    {{#each members}}
        <li class="list-group-item">{{this.name}}: {{this.email}}</li>
    {{/each}}
</ul>

We should render a page on request.
app.get("/", (req, res) => {
    res.render("index", { title: "Members App", members });
});





Adding member with form.
You should create a form and add the name attribute for inputs you want
to send on server. Also include sumbit button into form.


<form action="/api/members" method="post" class="mb-4">
    <div class="form-group">
        <label for="name">Name</label>
        <input class="form-control" type="text" name="name">
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <input class="form-control" type="text" name="email">
    </div>
    <button class="btn btn-primary btn-block" type="submit">Add Member</button>
</form>

Post request with path /api/members will be sent. You can retrieve name and email
with res.body.name and res.body.email .

You can redirect do another page instead of sending responce.
res.redirect("/")
instead of
res.json or res.send













