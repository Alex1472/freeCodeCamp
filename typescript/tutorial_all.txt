You can install typescript globally or locally for your project.
npm install -g typescript 

Get typescript compiler version.
tsc -v



FIRST APP, index.ts:

let x: number = 1;


To compile it to js, you should run:
tsc index
Then index.js file will be created.

You can countinious recompile file on save with
tsc --watch index

If you run just
tsc
it will compile all you .ts file into .js files.
tsc --watch  -  to recompile all project files on save.

You should create tsc config file(tsconfig.json), then it will be compile int ES6. See target in tsconfig.json.
Without this it will compile file to ES5.

You can specify folder that will be compiled and the folder when the result will be:
jsconfig.json:
"rootDir": "./src",
"outDir": "./dest"



PRIMITIVE TYPES:

let num: number = 1;
let s: string = "test";
let res: boolean = true;

When you create variable with assigning value without specify type.
Typescript infers the variable type.
let s = "test"
let s1: string = "test" //the same
s = 1; //error

There is type any, that allows you assing values of different types.
let val: any = true;
val = 1; //correct



ARRAYS AND TUPLES:
let arr: number[] = [1, 2, 3];
arr.push("test"); //error

You can create array of fixed length with fixed type, it is called tuple.
let arr: [string, number, boolean] = ["test", 3, true];
arr[0] = "ttt";
arr[0] = 1; //error



UNIONS:
You can say that variable can be one of several types. It is calls union:
let x: string | number = "test";
x = 1;
x = false; //error

You can use union to use null for object. Without null it will be an error in first line.
let s : string | null = null;
s = "test";



ENUMS:
Enum set of variables with fixed values:
enum Numbers {
	one,
	two,
	three
}
By default the values are 0, 1, 2.
You can explicitly specify values you want.
enum Numbers {
    one = "one",
    two = "two",
    three = "three"
}
enum Numbers {
    one = 1,
    two = "two",
    three = "three"
}



TYPE ASSERTION:
You can type any type to exact type:
let x: any = 1;
let y: number = <number>x;
or
let y: any = x as number;



FUNCTION:
You can specify parameter type and return type for funtion:
function sum(a: number, b: number): number {
    return a + b;
}
console.log(sum(1, 4));
console.log(sum(1, true)); //error

You can explicitly say that function do not returns any value with void.
function logMassage(message: string): void {
    console.log(message);
}
logMassage("test");



OBJECT TYPES
You can specify type of object:
type User = {
    id: number,
    name: string,
}
let user1: User = {
    name: "Alex",
    id: 1,
}

Object should be with exact the same fields
let user1: User = {
    name: "Alex",
    id: 1,
    surname: "test",
} //Error 

Type can be primitive:
type message = string | number;
let message1 : message = "Hello world!"



INTERFACES
interface IUser {
    id: number,
    name: string
}
let user1 : IUser = {
    id: 1,
    name: "Alex",
}

As in types, the properties of an object should be exactly the same as in the interface.
Properties in an interface can be optional(it not nessasary to implement them) and readonly(you can't change them).
interface IUser {
	readonly id: number, //readonly
	name: string,
	age?: number //optional`
}

Functions can also has interfaces
interface MathFunc {
    (x: number, y: number) : number
}
let f: MathFunc = (x: number, y: number): number => x + y;



LITERAL TYPE

You can specify set of values that that variable can be.
type Price = 10 | 20 | 30;
function ShowPrice(price : Price) : void { //price can be only 10, 20, 30
    console.log(`The price is ${price}$`);
}



CLASSES

class User {
    id: number
    name: string

    constructor(id: number, name: string) {
        this.id = id;
        this.name = name;
    }
	
	sayName(): void {
		console.log(this.name);
	}
}
let user1 : User = new User(1, "Alex");

By default all fields and methods are public. They can be private, protected and public.
class User {
    private id: number
    name: string

    constructor(id: number, name: string) {
        this.id = id;
        this.name = name;
    }

    protected sayName(): void {
        console.log(this.name);
    }
}

let user1 : User = new User(1, "Alex");
console.log(user1.id); //error
console.log(user1.name); //correct
user1.sayName(); //error


You can make some fields readonly.

class User {
    private readonly firstName : string
    private readonly lastName : string

    constructor(firstName: string, lastName: string) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    sayHello() {
        console.log(`Hello, my name is ${this.firstName} ${this.lastName}.`);
    }
}

let user: User = new User('Alex', 'Petrovskiy');
user.sayHello();

You can use static properties.
class User {
	static readonly TestField = "Test";
	...
}
console.log(User.TestField);



CLASS INTERFACES
interface IUser {
    id: number,
    name: string,
    sayName(): void //user brackets here
}

class User implements IUser {
    id: number
    name: string
    age: number

    constructor(id: number, name: string, age: number) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    sayName(): void {
        console.log(this.name);
    }
}

let user1 : IUser = new User(1, "Alex", 20);



INHERITANCE:
class User {
    id: number
    name: string

    constructor(id: number, name: string) {
        this.id = id;
        this.name = name;
    }

    sayName(): void {
        console.log(this.name);
    }
}

class Employee extends User {
    position: string

    constructor(id: number, name: string, position: string) {
        super(id, name);
        this.position = position;
    }
}

let emp: Employee = new Employee(1, "Alex", "Developer");
console.log(emp.name);


GENERICS

function getArray<T>(items: T[]) : T[] {
    return new Array().concat(items);
}
let sArray: string[] = getArray<string>(["a", "b", "c"]);
let nArray: number[] = getArray<number>([1, 3, 4]);


You can say the type of the parameter.
function addId<T extends object>(obj: T) : object {
    return {
        ...obj,
        id: 12
    }
}

addId(1); //error
let user = { name: "Alex" };
addId(user); //OK

You can use generic interfaces
interface User<T> {
    name: string,
    data: T
}

let user1 : User<string> = {
    name: 'Alex',
    data: 'test'
}
let user2 : User<number[]> = {
    name: 'Tom',
    data: [3, 4, 5]
}

Generic functions, interfaces can have several parameters.
interface User<T, V> {
    name: string,
    data: T,
    meta: V
}
let user1 : User<number, string> = {
    name: 'Alex',
    data: 1,
    meta: 'test',
}




VOID

void = undefined | null;



ANY

any is a type that allows us to assing variable of any type.
let value : any = 'test';
value = 1; //correct



NEVER

Functions that returns never should reach end of its body.
function sayHello() : never {
    console.log("Hello"); //error
}

function sayHello() : never {
    throw "hello"
    console.log("Hello"); //correct, we have never reached this row.
}



UNKNOWN

You can assing any type variable to any typed variable or ran any type variable functions.
let a: any = 1;
let b: number = a; //OK it compiles
a.test(); //OK it compiles

With unknown you cann't do this. You should explicitly convert variable with unknown type.
let a2: unknown = 1;
let b2: number = a2; //error
a2.test(); //error

You can use as operator to convert from unknown.
let a2: unknown = 1;
let b2: number = a2 as number; //OK

You can convert on type to another with unknown to directly.
let a2: string = "22";
let b2: number = a2 as number; //error
let b2: number = (a2 as unknown) as number; //ok




