By default, python looks up an attribute in instance __dict__. But dictionary has memory overhead.
You can use another data structure with less memory consumption. But you will be unable add attrubutes in runtime
In __slots__ attrubute of a class you should define which instance attributes has instance.

class Point2D:
    __slots__ = ('x', 'y') # we have to attibutes x, y.
    def __init__(self, x, y):
        self.x = x
        self.y = y
		
In this case we will not have __dict__.
point = Point2D(1, 2)
print(point.__dict__) # error



If base class uses __slots__, and child do not. It will be used __dict__ for child attributes and __slots__ for parent attrubutes.
class Point2D:
    __slots__ = ('x', 'y')
	
    def __init__(self, x, y):
        self.x = x
        self.y = y


class Point3D(Point2D):
    # __slots__ = ('z',) - you can use slots in child like this

    def __init__(self, x, y, z):
        super().__init__(x, y)
        self.z = z


point = Point3D(1, 2, 3)
print(point.__slots__) # ('x', 'y')
print(point.__dict__) # {'z': 3}


If parent do not uses slot and child do, also will be used slots and dict.


